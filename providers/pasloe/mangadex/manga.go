package mangadex

import (
	"context"
	"fmt"

	"github.com/Fesaa/Media-Provider/db/models"
	"github.com/Fesaa/Media-Provider/http/menou"
	"github.com/Fesaa/Media-Provider/http/payload"
	"github.com/Fesaa/Media-Provider/providers/pasloe/core"
	"github.com/Fesaa/Media-Provider/services"
	"github.com/Fesaa/Media-Provider/utils"
	"github.com/spf13/afero"
	"go.uber.org/dig"
)

const comicInfoNote = "This comicinfo.xml was auto generated by Media-Provider, with information from mangadex. Source code can be found here: https://github.com/Fesaa/Media-Provider/"
const metronInfoNote = "This metroninfo.xml was auto generated by Media-Provider, with information from mangadex. Source code can be found here: https://github.com/Fesaa/Media-Provider/"
const timeLayout = "2006-01-02T15:04:05Z07:00"
const genreTag = "genre"

func New(scope *dig.Scope) core.Downloadable {
	var m *manga

	utils.Must(scope.Invoke(func(
		req payload.DownloadRequest, httpClient *menou.Client,
		repository Repository, markdownService services.MarkdownService,
		imageService services.ImageService, fs afero.Afero,
	) {
		m = &manga{
			id:              req.Id,
			httpClient:      httpClient,
			repository:      repository,
			markdownService: markdownService,
			imageService:    imageService,
			fs:              fs,

			language: utils.MustHave(req.GetString(LanguageKey, "en")),
		}
		m.Core = core.New[ChapterSearchData, *MangaSearchData](scope, "mangadex", m)
	}))

	return m
}

type manga struct {
	*core.Core[ChapterSearchData, *MangaSearchData]
	id string

	httpClient      *menou.Client
	repository      Repository
	markdownService services.MarkdownService
	imageService    services.ImageService
	fs              afero.Afero

	chapters ChapterSearchResponse

	coverFactory CoverFactory

	lastFoundChapter float64
	lastFoundVolume  float64
	foundLastVolume  bool
	foundLastChapter bool

	hasWarned bool

	language string
}

func (m *manga) CustomizeAllChapters() []ChapterSearchData {
	return m.chapters.Data
}

func (m *manga) Title() string {
	if titleOverride, ok := m.Req.GetString(core.TitleOverride); ok {
		return titleOverride
	}

	if m.SeriesInfo == nil {
		return utils.NonEmpty(m.Req.TempTitle, m.Req.Id)
	}

	return utils.NonEmpty(m.SeriesInfo.GetTitle(), m.Req.TempTitle, m.Req.Id)
}

func (m *manga) Provider() models.Provider {
	return m.Req.Provider
}

func (m *manga) RefUrl() string {
	return fmt.Sprintf("https://mangadex.org/title/%s", m.id)
}

func (m *manga) ContentUrls(ctx context.Context, chapter ChapterSearchData) ([]string, error) {
	imageInfo, err := m.repository.GetChapterImages(ctx, chapter.Id)
	if err != nil {
		return nil, err
	}
	return imageInfo.FullImageUrls(), nil
}
